#!/usr/bin/env python3

import re
import os
import argparse
import socket
import dns.resolver
import dns.name
import geoip2.database
import requests
import configparser
import mysql.connector
from tld import get_tld
from ipwhois import IPWhois


def dns_lookup(qname, qtype):
    try:
        answer = resolver.query(qname, qtype)
        rdata = answer.rrset
        print('\n' + BOLD + qtype + NORMAL)
        if qtype == 'SOA':
            print(TAB, rdata[0].mname)
        elif qtype == 'A':
            print(TAB, rdata.to_text().replace('\n', '\n' + TAB + ' '))
            ip = str(rdata[0])
            rev = '.'.join(reversed(ip.split('.'))) + '.in-addr.arpa'
            if ip == "217.19.237.54":
                print(TAB, "URL FORWARDER COMBELL")
            return ip, rev
        else:
            print(TAB, rdata.to_text().replace('\n', '\n' + TAB + ' '))
    except dns.resolver.NXDOMAIN:
        if qtype == "A":
            print('\n' + BOLD + qtype + NORMAL)
            print(TAB, 'NXDOMAIN')
    except dns.resolver.NoAnswer:
        pass
        #  print("NoAnswer")
    except Exception:
        print('\nError:', qtype)


def _db_lookup(ip):
    config = configparser.ConfigParser()
    userconfigdir = os.environ.get('HOME') + '/.config/edig'
    userconfigfile = userconfigdir + '/config.ini'
    if len(config.read(userconfigfile)) == 0:
        print(TAB, "Couldn't not read config file: " + userconfigfile)
        return
    try:
        db_host = config['DB']['host']
        db_user = config['DB']['user']
        db_password = config['DB']['password']
        db_query = config['DB']['query']
        # replace {} with ip address
        db_query = db_query.replace('{}', ip)
    except Exception:
        print(TAB, "Errors in " + userconfigfile)

    connection = mysql.connector.connect(
        host=db_host,
        user=db_user,
        passwd=db_password
    )
    cursor = connection.cursor()
    cursor.execute(db_query)
    row = cursor.fetchone()
    if row is not None:
        print('\n' + BOLD + 'SERVER' + NORMAL)
        print(TAB + ' ' + ip + ' = ' + row[0])
    # cursor.close()
    connection.close()


def _lookup(tld, fqdn, data):
    dns_lookup(tld, 'SOA')
    dns_lookup(tld, 'NS')
    dns_lookup(fqdn, 'CNAME')
    ip, rev = dns_lookup(fqdn, 'A')
    dns_lookup(rev, 'PTR')
    _db_lookup(ip)
    dns_lookup(tld, 'TXT')
    dns_lookup(tld, 'MX')
    try:
        whois = IPWhois(ip).lookup_whois()
        print('\n' + BOLD + 'WHOIS' + NORMAL)
        print(TAB, 'description: ', whois['asn_description'])
        print(TAB, 'netname    : ', whois['nets'][0]['name'])
    except Exception:
        pass

    print('\n' + BOLD + 'REDIRECT' + NORMAL)
    try:
        if not data.startswith('http'):
            data = 'http://' + data
        r = requests.get(data, timeout=5)
        for i, response in enumerate(r.history, 1):
            print(TAB, '{} => {}'.format(response.status_code, response.url))
        print(TAB, '{} => {}'.format(r.status_code, r.url))
    except Exception:
        pass


def _rev_lookup(ip):
    try:
        country = geoip2.database.Reader('/usr/local/share/GeoIP/GeoLite2-Country_20191224/GeoLite2-Country.mmdb')
    except FileNotFoundError:
        #  print("Download database from https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz")
        print("Download database from https://web.archive.org/web/20191227182412/https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz")
        exit(1)

    rev = '.'.join(reversed(ip.split('.'))) + '.in-addr.arpa'
    dns_lookup(rev, 'PTR')

    print('\n' + BOLD + 'GEOIP' + NORMAL + '\n' + TAB, country.country(ip).country.name)

    try:
        whois = IPWhois(ip).lookup_whois()
        print('\n' + BOLD + 'WHOIS' + NORMAL)
        print(TAB, 'description: ', whois['asn_description'])
        print(TAB, 'netname    : ', whois['nets'][0]['name'])
    except Exception:
        pass


def main():
    global BOLD, NORMAL, TAB
    global resolver

    BOLD = '\033[1m'
    NORMAL = '\033[0m'
    TAB = '    '
    parser = argparse.ArgumentParser(description="Extended dig program")
    parser.add_argument('data', type=str, help="url, domain or ip address")
    parser.add_argument('-n', '--nameserver', type=str, default='8.8.8.8', help="default is 8.8.8.8")
    args = parser.parse_args()
    data = args.data

    # set resolver to external dns server
    resolver = dns.resolver.Resolver()
    resolver.nameservers = [socket.gethostbyname(args.nameserver)]

    # check if args is ip or url
    try:
        fqdn = get_tld(data, as_object=True, fix_protocol=True).parsed_url.netloc
        tld = dns.resolver.zone_for_name(fqdn)
        _lookup(tld, fqdn, data)
    except Exception:
        ip = re.match(r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", data)
        if ip:
            ip = data
            _rev_lookup(ip)
        else:
            print("{} is not a valid IP or domain".format(data))


main()
